apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-server
  namespace: demo
  labels:
    app: redis-server

spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
      - name: redis
        image: redis:6.2.3-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 6379
          name: redis

        resources:
          limits:
            cpu: "200m"
            memory: 200Mi
          requests:
            cpu: "200m"
            memory: 200Mi
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        lifecycle:
          preStop:
            exec:
              command: 
              - /bin/sh
              - -c
              - nodetool drain

        
        # These volume mounts are persistent. They are like inline claims,
        # but not exactly because the names need to match exactly one of
        # the stateful pod volumes.
        volumeMounts:
        - name: redis-data
          mountPath: /var/lib/redis
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  # do not use these in production until ssd GCEPersistentDisk or other ssd pd
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: gp2 (default)
      resources:
        requests:
          storage: 1Gi
